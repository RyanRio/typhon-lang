// Do NOT MODIFY. File automatically generated by asdl_js.py.

define([], function() {
  var that = {
  };

// ----------------------
// operator functions
// ----------------------

function Load() {}
that.Load = Load;
function Store() {}
that.Store = Store;
function Del() {}
that.Del = Del;
function AugLoad() {}
that.AugLoad = AugLoad;
function AugStore() {}
that.AugStore = AugStore;
function Param() {}
that.Param = Param;

function And() {}
that.And = And;
function Or() {}
that.Or = Or;

function Add() {}
that.Add = Add;
function Sub() {}
that.Sub = Sub;
function Mult() {}
that.Mult = Mult;
function Div() {}
that.Div = Div;
function Mod() {}
that.Mod = Mod;
function Pow() {}
that.Pow = Pow;
function LShift() {}
that.LShift = LShift;
function RShift() {}
that.RShift = RShift;
function BitOr() {}
that.BitOr = BitOr;
function BitXor() {}
that.BitXor = BitXor;
function BitAnd() {}
that.BitAnd = BitAnd;
function FloorDiv() {}
that.FloorDiv = FloorDiv;

function Invert() {}
that.Invert = Invert;
function Not() {}
that.Not = Not;
function UAdd() {}
that.UAdd = UAdd;
function USub() {}
that.USub = USub;

function Eq() {}
that.Eq = Eq;
function NotEq() {}
that.NotEq = NotEq;
function Lt() {}
that.Lt = Lt;
function LtE() {}
that.LtE = LtE;
function Gt() {}
that.Gt = Gt;
function GtE() {}
that.GtE = GtE;
function Is() {}
that.Is = Is;
function IsNot() {}
that.IsNot = IsNot;
function In_() {}
that.In_ = In_;
function NotIn() {}
that.NotIn = NotIn;



// ----------------------
// constructors for nodes
// ----------------------

function Module(body)
{
    this.body = body;
    return this;
}
that.Module = Module;

function Interactive(body)
{
    this.body = body;
    return this;
}
that.Interactive = Interactive;

function Expression(body)
{
    this.body = body;
    return this;
}
that.Expression = Expression;

function Suite(body)
{
    this.body = body;
    return this;
}
that.Suite = Suite;

function FunctionDef(name, args, body, decorator_list, lineno, col_offset)
{
    this.name = name;
    this.args = args;
    this.body = body;
    this.decorator_list = decorator_list;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.FunctionDef = FunctionDef;

function ClassDef(name, bases, body, decorator_list, lineno, col_offset)
{
    this.name = name;
    this.bases = bases;
    this.body = body;
    this.decorator_list = decorator_list;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.ClassDef = ClassDef;

function Return_(value, lineno, col_offset)
{
    this.value = value;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.Return_ = Return_;

function Delete_(targets, lineno, col_offset)
{
    this.targets = targets;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.Delete_ = Delete_;

function Assign(targets, value, lineno, col_offset)
{
    this.targets = targets;
    this.value = value;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.Assign = Assign;

function AugAssign(target, op, value, lineno, col_offset)
{
    this.target = target;
    this.op = op;
    this.value = value;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.AugAssign = AugAssign;

function Print(dest, values, nl, lineno, col_offset)
{
    this.dest = dest;
    this.values = values;
    this.nl = nl;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.Print = Print;

function For_(target, iter, body, orelse, lineno, col_offset)
{
    this.target = target;
    this.iter = iter;
    this.body = body;
    this.orelse = orelse;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.For_ = For_;

function While_(test, body, orelse, lineno, col_offset)
{
    this.test = test;
    this.body = body;
    this.orelse = orelse;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.While_ = While_;

function If_(test, body, orelse, lineno, col_offset)
{
    this.test = test;
    this.body = body;
    this.orelse = orelse;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.If_ = If_;

function With_(context_expr, optional_vars, body, lineno, col_offset)
{
    this.context_expr = context_expr;
    this.optional_vars = optional_vars;
    this.body = body;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.With_ = With_;

function Raise(type, inst, tback, lineno, col_offset)
{
    this.type = type;
    this.inst = inst;
    this.tback = tback;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.Raise = Raise;

function TryExcept(body, handlers, orelse, lineno, col_offset)
{
    this.body = body;
    this.handlers = handlers;
    this.orelse = orelse;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.TryExcept = TryExcept;

function TryFinally(body, finalbody, lineno, col_offset)
{
    this.body = body;
    this.finalbody = finalbody;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.TryFinally = TryFinally;

function Assert(test, msg, lineno, col_offset)
{
    this.test = test;
    this.msg = msg;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.Assert = Assert;

function Import_(names, lineno, col_offset)
{
    this.names = names;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.Import_ = Import_;

function ImportFrom(module, names, level, lineno, col_offset)
{
    this.module = module;
    this.names = names;
    this.level = level;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.ImportFrom = ImportFrom;

function Exec(body, globals, locals, lineno, col_offset)
{
    this.body = body;
    this.globals = globals;
    this.locals = locals;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.Exec = Exec;

function Global(names, lineno, col_offset)
{
    this.names = names;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.Global = Global;

function NonLocal(names, lineno, col_offset)
{
    this.names = names;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.NonLocal = NonLocal;

function Expr(value, lineno, col_offset)
{
    this.value = value;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.Expr = Expr;

function Pass(lineno, col_offset)
{
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.Pass = Pass;

function Break_(lineno, col_offset)
{
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.Break_ = Break_;

function Continue_(lineno, col_offset)
{
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.Continue_ = Continue_;

function BoolOp(op, values, lineno, col_offset)
{
    this.op = op;
    this.values = values;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.BoolOp = BoolOp;

function BinOp(left, op, right, lineno, col_offset)
{
    this.left = left;
    this.op = op;
    this.right = right;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.BinOp = BinOp;

function UnaryOp(op, operand, lineno, col_offset)
{
    this.op = op;
    this.operand = operand;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.UnaryOp = UnaryOp;

function Lambda(args, body, lineno, col_offset)
{
    this.args = args;
    this.body = body;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.Lambda = Lambda;

function IfExp(test, body, orelse, lineno, col_offset)
{
    this.test = test;
    this.body = body;
    this.orelse = orelse;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.IfExp = IfExp;

function Dict(keys, values, lineno, col_offset)
{
    this.keys = keys;
    this.values = values;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.Dict = Dict;

function ListComp(elt, generators, lineno, col_offset)
{
    this.elt = elt;
    this.generators = generators;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.ListComp = ListComp;

function GeneratorExp(elt, generators, lineno, col_offset)
{
    this.elt = elt;
    this.generators = generators;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.GeneratorExp = GeneratorExp;

function Yield(value, lineno, col_offset)
{
    this.value = value;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.Yield = Yield;

function Compare(left, ops, comparators, lineno, col_offset)
{
    this.left = left;
    this.ops = ops;
    this.comparators = comparators;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.Compare = Compare;

function Call(func, args, keywords, starargs, kwargs, lineno, col_offset)
{
    this.func = func;
    this.args = args;
    this.keywords = keywords;
    this.starargs = starargs;
    this.kwargs = kwargs;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.Call = Call;

function Num(n, lineno, col_offset)
{
    this.n = n;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.Num = Num;

function Str(s, lineno, col_offset)
{
    this.s = s;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.Str = Str;

function Attribute(value, attr, ctx, lineno, col_offset)
{
    this.value = value;
    this.attr = attr;
    this.ctx = ctx;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.Attribute = Attribute;

function Subscript(value, slice, ctx, lineno, col_offset)
{
    this.value = value;
    this.slice = slice;
    this.ctx = ctx;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.Subscript = Subscript;

function Name(id, ctx, lineno, col_offset)
{
    this.id = id;
    this.ctx = ctx;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.Name = Name;

function List(elts, ctx, lineno, col_offset)
{
    this.elts = elts;
    this.ctx = ctx;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.List = List;

function Tuple(elts, ctx, lineno, col_offset)
{
    this.elts = elts;
    this.ctx = ctx;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.Tuple = Tuple;

function Ellipsis()
{
    return this;
}
that.Ellipsis = Ellipsis;

function Slice(lower, upper, step)
{
    this.lower = lower;
    this.upper = upper;
    this.step = step;
    return this;
}
that.Slice = Slice;

function ExtSlice(dims)
{
    this.dims = dims;
    return this;
}
that.ExtSlice = ExtSlice;

function Index(value)
{
    this.value = value;
    return this;
}
that.Index = Index;

function comprehension(target, iter, ifs)
{
    this.target = target;
    this.iter = iter;
    this.ifs = ifs;
    return this;
}
that.comprehension = comprehension;

function ExceptHandler(type, name, body, lineno, col_offset)
{
    this.type = type;
    this.name = name;
    this.body = body;
    this.lineno = lineno;
    this.col_offset = col_offset;
    return this;
}
that.ExceptHandler = ExceptHandler;

function arguments_(args, vararg, kwarg, defaults)
{
    this.args = args;
    this.vararg = vararg;
    this.kwarg = kwarg;
    this.defaults = defaults;
    return this;
}
that.arguments_ = arguments_;

function keyword(arg, value)
{
    this.arg = arg;
    this.value = value;
    return this;
}
that.keyword = keyword;

function alias(name, asname)
{
    this.name = name;
    this.asname = asname;
    return this;
}
that.alias = alias;


Module.prototype._astname = 'Module';
Module.prototype._fields = [
    'body', function(n) { return n.body; }
];
Interactive.prototype._astname = 'Interactive';
Interactive.prototype._fields = [
    'body', function(n) { return n.body; }
];
Expression.prototype._astname = 'Expression';
Expression.prototype._fields = [
    'body', function(n) { return n.body; }
];
Suite.prototype._astname = 'Suite';
Suite.prototype._fields = [
    'body', function(n) { return n.body; }
];
FunctionDef.prototype._astname = 'FunctionDef';
FunctionDef.prototype._fields = [
    'name', function(n) { return n.name; },
    'args', function(n) { return n.args; },
    'body', function(n) { return n.body; },
    'decorator_list', function(n) { return n.decorator_list; }
];
ClassDef.prototype._astname = 'ClassDef';
ClassDef.prototype._fields = [
    'name', function(n) { return n.name; },
    'bases', function(n) { return n.bases; },
    'body', function(n) { return n.body; },
    'decorator_list', function(n) { return n.decorator_list; }
];
Return_.prototype._astname = 'Return';
Return_.prototype._fields = [
    'value', function(n) { return n.value; }
];
Delete_.prototype._astname = 'Delete';
Delete_.prototype._fields = [
    'targets', function(n) { return n.targets; }
];
Assign.prototype._astname = 'Assign';
Assign.prototype._fields = [
    'targets', function(n) { return n.targets; },
    'value', function(n) { return n.value; }
];
AugAssign.prototype._astname = 'AugAssign';
AugAssign.prototype._fields = [
    'target', function(n) { return n.target; },
    'op', function(n) { return n.op; },
    'value', function(n) { return n.value; }
];
Print.prototype._astname = 'Print';
Print.prototype._fields = [
    'dest', function(n) { return n.dest; },
    'values', function(n) { return n.values; },
    'nl', function(n) { return n.nl; }
];
For_.prototype._astname = 'For';
For_.prototype._fields = [
    'target', function(n) { return n.target; },
    'iter', function(n) { return n.iter; },
    'body', function(n) { return n.body; },
    'orelse', function(n) { return n.orelse; }
];
While_.prototype._astname = 'While';
While_.prototype._fields = [
    'test', function(n) { return n.test; },
    'body', function(n) { return n.body; },
    'orelse', function(n) { return n.orelse; }
];
If_.prototype._astname = 'If';
If_.prototype._fields = [
    'test', function(n) { return n.test; },
    'body', function(n) { return n.body; },
    'orelse', function(n) { return n.orelse; }
];
With_.prototype._astname = 'With';
With_.prototype._fields = [
    'context_expr', function(n) { return n.context_expr; },
    'optional_vars', function(n) { return n.optional_vars; },
    'body', function(n) { return n.body; }
];
Raise.prototype._astname = 'Raise';
Raise.prototype._fields = [
    'type', function(n) { return n.type; },
    'inst', function(n) { return n.inst; },
    'tback', function(n) { return n.tback; }
];
TryExcept.prototype._astname = 'TryExcept';
TryExcept.prototype._fields = [
    'body', function(n) { return n.body; },
    'handlers', function(n) { return n.handlers; },
    'orelse', function(n) { return n.orelse; }
];
TryFinally.prototype._astname = 'TryFinally';
TryFinally.prototype._fields = [
    'body', function(n) { return n.body; },
    'finalbody', function(n) { return n.finalbody; }
];
Assert.prototype._astname = 'Assert';
Assert.prototype._fields = [
    'test', function(n) { return n.test; },
    'msg', function(n) { return n.msg; }
];
Import_.prototype._astname = 'Import';
Import_.prototype._fields = [
    'names', function(n) { return n.names; }
];
ImportFrom.prototype._astname = 'ImportFrom';
ImportFrom.prototype._fields = [
    'module', function(n) { return n.module; },
    'names', function(n) { return n.names; },
    'level', function(n) { return n.level; }
];
Exec.prototype._astname = 'Exec';
Exec.prototype._fields = [
    'body', function(n) { return n.body; },
    'globals', function(n) { return n.globals; },
    'locals', function(n) { return n.locals; }
];
Global.prototype._astname = 'Global';
Global.prototype._fields = [
    'names', function(n) { return n.names; }
];
NonLocal.prototype._astname = 'NonLocal';
NonLocal.prototype._fields = [
    'names', function(n) { return n.names; }
];
Expr.prototype._astname = 'Expr';
Expr.prototype._fields = [
    'value', function(n) { return n.value; }
];
Pass.prototype._astname = 'Pass';
Pass.prototype._fields = [
];
Break_.prototype._astname = 'Break';
Break_.prototype._fields = [
];
Continue_.prototype._astname = 'Continue';
Continue_.prototype._fields = [
];
BoolOp.prototype._astname = 'BoolOp';
BoolOp.prototype._fields = [
    'op', function(n) { return n.op; },
    'values', function(n) { return n.values; }
];
BinOp.prototype._astname = 'BinOp';
BinOp.prototype._fields = [
    'left', function(n) { return n.left; },
    'op', function(n) { return n.op; },
    'right', function(n) { return n.right; }
];
UnaryOp.prototype._astname = 'UnaryOp';
UnaryOp.prototype._fields = [
    'op', function(n) { return n.op; },
    'operand', function(n) { return n.operand; }
];
Lambda.prototype._astname = 'Lambda';
Lambda.prototype._fields = [
    'args', function(n) { return n.args; },
    'body', function(n) { return n.body; }
];
IfExp.prototype._astname = 'IfExp';
IfExp.prototype._fields = [
    'test', function(n) { return n.test; },
    'body', function(n) { return n.body; },
    'orelse', function(n) { return n.orelse; }
];
Dict.prototype._astname = 'Dict';
Dict.prototype._fields = [
    'keys', function(n) { return n.keys; },
    'values', function(n) { return n.values; }
];
ListComp.prototype._astname = 'ListComp';
ListComp.prototype._fields = [
    'elt', function(n) { return n.elt; },
    'generators', function(n) { return n.generators; }
];
GeneratorExp.prototype._astname = 'GeneratorExp';
GeneratorExp.prototype._fields = [
    'elt', function(n) { return n.elt; },
    'generators', function(n) { return n.generators; }
];
Yield.prototype._astname = 'Yield';
Yield.prototype._fields = [
    'value', function(n) { return n.value; }
];
Compare.prototype._astname = 'Compare';
Compare.prototype._fields = [
    'left', function(n) { return n.left; },
    'ops', function(n) { return n.ops; },
    'comparators', function(n) { return n.comparators; }
];
Call.prototype._astname = 'Call';
Call.prototype._fields = [
    'func', function(n) { return n.func; },
    'args', function(n) { return n.args; },
    'keywords', function(n) { return n.keywords; },
    'starargs', function(n) { return n.starargs; },
    'kwargs', function(n) { return n.kwargs; }
];
Num.prototype._astname = 'Num';
Num.prototype._fields = [
    'n', function(n) { return n.n; }
];
Str.prototype._astname = 'Str';
Str.prototype._fields = [
    's', function(n) { return n.s; }
];
Attribute.prototype._astname = 'Attribute';
Attribute.prototype._fields = [
    'value', function(n) { return n.value; },
    'attr', function(n) { return n.attr; },
    'ctx', function(n) { return n.ctx; }
];
Subscript.prototype._astname = 'Subscript';
Subscript.prototype._fields = [
    'value', function(n) { return n.value; },
    'slice', function(n) { return n.slice; },
    'ctx', function(n) { return n.ctx; }
];
Name.prototype._astname = 'Name';
Name.prototype._fields = [
    'id', function(n) { return n.id; },
    'ctx', function(n) { return n.ctx; }
];
List.prototype._astname = 'List';
List.prototype._fields = [
    'elts', function(n) { return n.elts; },
    'ctx', function(n) { return n.ctx; }
];
Tuple.prototype._astname = 'Tuple';
Tuple.prototype._fields = [
    'elts', function(n) { return n.elts; },
    'ctx', function(n) { return n.ctx; }
];
Load.prototype._astname = 'Load';
Load.prototype._isenum = true;
Store.prototype._astname = 'Store';
Store.prototype._isenum = true;
Del.prototype._astname = 'Del';
Del.prototype._isenum = true;
AugLoad.prototype._astname = 'AugLoad';
AugLoad.prototype._isenum = true;
AugStore.prototype._astname = 'AugStore';
AugStore.prototype._isenum = true;
Param.prototype._astname = 'Param';
Param.prototype._isenum = true;
Ellipsis.prototype._astname = 'Ellipsis';
Ellipsis.prototype._fields = [
];
Slice.prototype._astname = 'Slice';
Slice.prototype._fields = [
    'lower', function(n) { return n.lower; },
    'upper', function(n) { return n.upper; },
    'step', function(n) { return n.step; }
];
ExtSlice.prototype._astname = 'ExtSlice';
ExtSlice.prototype._fields = [
    'dims', function(n) { return n.dims; }
];
Index.prototype._astname = 'Index';
Index.prototype._fields = [
    'value', function(n) { return n.value; }
];
And.prototype._astname = 'And';
And.prototype._isenum = true;
Or.prototype._astname = 'Or';
Or.prototype._isenum = true;
Add.prototype._astname = 'Add';
Add.prototype._isenum = true;
Sub.prototype._astname = 'Sub';
Sub.prototype._isenum = true;
Mult.prototype._astname = 'Mult';
Mult.prototype._isenum = true;
Div.prototype._astname = 'Div';
Div.prototype._isenum = true;
Mod.prototype._astname = 'Mod';
Mod.prototype._isenum = true;
Pow.prototype._astname = 'Pow';
Pow.prototype._isenum = true;
LShift.prototype._astname = 'LShift';
LShift.prototype._isenum = true;
RShift.prototype._astname = 'RShift';
RShift.prototype._isenum = true;
BitOr.prototype._astname = 'BitOr';
BitOr.prototype._isenum = true;
BitXor.prototype._astname = 'BitXor';
BitXor.prototype._isenum = true;
BitAnd.prototype._astname = 'BitAnd';
BitAnd.prototype._isenum = true;
FloorDiv.prototype._astname = 'FloorDiv';
FloorDiv.prototype._isenum = true;
Invert.prototype._astname = 'Invert';
Invert.prototype._isenum = true;
Not.prototype._astname = 'Not';
Not.prototype._isenum = true;
UAdd.prototype._astname = 'UAdd';
UAdd.prototype._isenum = true;
USub.prototype._astname = 'USub';
USub.prototype._isenum = true;
Eq.prototype._astname = 'Eq';
Eq.prototype._isenum = true;
NotEq.prototype._astname = 'NotEq';
NotEq.prototype._isenum = true;
Lt.prototype._astname = 'Lt';
Lt.prototype._isenum = true;
LtE.prototype._astname = 'LtE';
LtE.prototype._isenum = true;
Gt.prototype._astname = 'Gt';
Gt.prototype._isenum = true;
GtE.prototype._astname = 'GtE';
GtE.prototype._isenum = true;
Is.prototype._astname = 'Is';
Is.prototype._isenum = true;
IsNot.prototype._astname = 'IsNot';
IsNot.prototype._isenum = true;
In_.prototype._astname = 'In';
In_.prototype._isenum = true;
NotIn.prototype._astname = 'NotIn';
NotIn.prototype._isenum = true;
comprehension.prototype._astname = 'comprehension';
comprehension.prototype._fields = [
    'target', function(n) { return n.target; },
    'iter', function(n) { return n.iter; },
    'ifs', function(n) { return n.ifs; }
];
ExceptHandler.prototype._astname = 'ExceptHandler';
ExceptHandler.prototype._fields = [
    'type', function(n) { return n.type; },
    'name', function(n) { return n.name; },
    'body', function(n) { return n.body; }
];
arguments_.prototype._astname = 'arguments';
arguments_.prototype._fields = [
    'args', function(n) { return n.args; },
    'vararg', function(n) { return n.vararg; },
    'kwarg', function(n) { return n.kwarg; },
    'defaults', function(n) { return n.defaults; }
];
keyword.prototype._astname = 'keyword';
keyword.prototype._fields = [
    'arg', function(n) { return n.arg; },
    'value', function(n) { return n.value; }
];
alias.prototype._astname = 'alias';
alias.prototype._fields = [
    'name', function(n) { return n.name; },
    'asname', function(n) { return n.asname; }
];

  return that;
});
