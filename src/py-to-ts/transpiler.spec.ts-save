import { compile, resetCompiler } from './transpiler';

const fileName = 'foo.ts';

describe('transpiler', function () {

    it('should be available', function () {
        expect(typeof compile).toBe('function');
        expect(typeof resetCompiler).toBe('function');
    });

    xdescribe('ImportFrom', function () {
        it('everything from a module', function () {
            var result = compile('from visual import *', fileName);
            expect(typeof result).toBe('object');
            expect(typeof result.code).toBe('string');
            expect(result.code).toBe("import * from 'visual';");
        });
    });

    xdescribe('Assign', function () {
        it('Float', function () {
            var result = compile('x = 0.01', fileName);
            expect(typeof result).toBe('object');
            expect(typeof result.code).toBe('string');
            expect(result.code).toBe("x = 0.01;");
        });
    });

    xdescribe('Assign', function () {
        it('Integer', function () {
            var result = compile('x = 1', fileName);
            expect(typeof result).toBe('object');
            expect(typeof result.code).toBe('string');
            expect(result.code).toBe("x = 1;");
        });
    });

    xdescribe('Assign', function () {
        it('String', function () {
            var result = compile("name = 'David'", fileName);
            expect(typeof result).toBe('object');
            expect(typeof result.code).toBe('string');
            expect(result.code).toBe("name = 'David';");
        });
    });

    describe('Num', function () {
        it('Float', function () {
            var result = compile('0.01', fileName);
            expect(typeof result).toBe('object');
            expect(typeof result.code).toBe('string');
            expect(result.code).toBe("0.01");
        });
    });

    xdescribe('FunctionCall', function () {
        it('TODO', function () {
            const result = compile('rate(100)', fileName);
            expect(result.code).toBe("rate(100)");
        });
    });

    xdescribe('IfStatement', function () {
        it('TODO', function () {
            const result = compile('if x < 1:\n  x = 3', fileName);
            expect(result.code).toBe("if (x < 1) { x = 3 }");
        });
    });
});
